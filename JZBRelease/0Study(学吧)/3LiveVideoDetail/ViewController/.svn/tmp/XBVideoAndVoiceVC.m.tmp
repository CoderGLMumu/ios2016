//
//  XBVideoAndVoiceVC.m
//  JZBRelease
//
//  Created by cl z on 16/10/28.
//  Copyright © 2016年 zjapple. All rights reserved.
//

#import "XBVideoAndVoiceVC.h"
#import "AskAnswerList.h"
#import "RewardAlertView.h"

#import "DataBaseHelperSecond.h"
#import "IntegralDetailVC.h"

#import "RewardModel.h"
#import "LewPopupViewAnimationSpring.h"

#import "startNoticeView.h"

#import <AVFoundation/AVFoundation.h>
#import <MediaPlayer/MediaPlayer.h>
#import "Masonry.h"
#import "ZFPlayer.h"
#import "Defaults.h"
#import "ChatKeyBoard.h"
#import "ChatToolBarItem.h"
#import "MoreItem.h"
#import "FaceSourceManager.h"
#import "MJRefresh.h"
#import "VideoAndVoiceCell.h"
#import "SendEvaluateForQuestionModel.h"

@interface XBVideoAndVoiceVC ()<ChatKeyBoardDelegate,ChatKeyBoardDataSource,UITableViewDelegate,UITableViewDataSource>
@property (strong, nonatomic) ZFPlayerView *playerVie;
@property (atomic, assign) BOOL noticeViewBlock;
/** isMineInfo */
@property (nonatomic, assign) BOOL isMineInfo;

/** noticeview */
@property (nonatomic, weak) startNoticeView *noticeview;

@property (nonatomic, strong) ChatKeyBoard *chatKeyBoard;
@property (nonatomic, strong) UITableView *tableView;
@property (nonatomic, weak) UIImageView *BGimageV;
@property(nonatomic, strong) NSMutableArray *commentAry;
@property (nonatomic, assign) NSInteger requestCount;

@end

@implementation XBVideoAndVoiceVC

- (void)dealloc
{
    NSLog(@"%@释放了",self.class);
    [self.playerVie cancelAutoFadeOutControlBar];
    [self.commentAry removeAllObjects];
    self.commentAry = nil;
}

- (BOOL)shouldAutorotate
{
    return !self.playerVie.panel.fullScreenBtn.hidden;
}

- (UIInterfaceOrientationMask)supportedInterfaceOrientations
{
    return UIInterfaceOrientationMaskAll;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self.view setBackgroundColor:[UIColor whiteColor]];
    self.automaticallyAdjustsScrollViewInsets = NO;
    
    self.title = self.liveitem.title;
    self.commentAry = [[NSMutableArray alloc]init];
    [self createTableView];
    dispatch_async(dispatch_queue_create("", nil), ^{
        [self cellWithDataModel:self.question];
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.tableView reloadData];
        });
    });
    self.chatKeyBoard = [ChatKeyBoard keyBoardWithNavgationBarTranslucent:YES];
    self.chatKeyBoard.delegate = self;
    self.chatKeyBoard.dataSource = self;
    self.chatKeyBoard.placeHolder = @"说点什么";
    self.chatKeyBoard.allowMore = NO;
    self.chatKeyBoard.allowVoice = NO;
    self.chatKeyBoard.allowFace = NO;
    [self.view addSubview:self.chatKeyBoard];
    
    [self setupPlayer];
//    [self.view addSubview:self.playerVie];
    
}

//- (ZFPlayerView *)playerVie{
//    if (!_playerVie) {
//        if (self.videoOrVoice) {
////            _playerVie = [[ZFPlayerView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenWidth / 16 * 9)];
//            _playerVie = [[ZFPlayerView alloc]init];
//
////            [_playerVie mas_makeConstraints:^(MASConstraintMaker *make) {
////                make.top.equalTo(self.view).offset(20);
////                make.left.right.equalTo(self.view);
////                // 注意此处，宽高比16：9优先级比1000低就行，在因为iPhone 4S宽高比不是16：9
////                make.height.equalTo(_playerVie.mas_width).multipliedBy(9.0f/16.0f).with.priority(750);
////            }];
//        }else{
////            _playerVie = [[ZFPlayerView alloc]initWithFrame:CGRectMake(0, 0, self.view.glw_width, 155)];
//            _playerVie = [[ZFPlayerView alloc]init];
//
////            [_playerVie mas_makeConstraints:^(MASConstraintMaker *make) {
////                make.top.equalTo(self.view).offset(20);
////                make.left.right.equalTo(self.view);
////                // 注意此处，宽高比16：9优先级比1000低就行，在因为iPhone 4S宽高比不是16：9
////                make.height.equalTo(@(155));
////            }];
//        }
//        
//        [self setupPlayer];
//    }
//    return _playerVie;
//}

- (void)setupPlayer
{
    self.playerVie = [[ZFPlayerView alloc]init];
    [self.view addSubview:self.playerVie];
    
    if (self.videoOrVoice) {
        //            _playerVie = [[ZFPlayerView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenWidth / 16 * 9)];
        
        [self.playerVie mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.view).offset( 64);
            make.left.right.equalTo(self.view);
            // 注意此处，宽高比16：9优先级比1000低就行，在因为iPhone 4S宽高比不是16：9
            make.height.equalTo(_playerVie.mas_width).multipliedBy(9.0f/16.0f).with.priority(750);
        }];
    }else{
        //            _playerVie = [[ZFPlayerView alloc]initWithFrame:CGRectMake(0, 0, self.view.glw_width, 155)];
        
        [self.playerVie mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.view).offset( 64);
            make.left.right.equalTo(self.view);
            // 注意此处，宽高比16：9优先级比1000低就行，在因为iPhone 4S宽高比不是16：9
            make.height.equalTo(@(155));
        }];
    }
    
    self.playerVie.liveitem = self.liveitem;
    
    self.playerVie.videoURL = self.videoURL;
    // （可选设置）可以设置视频的填充模式，内部设置默认（ZFPlayerLayerGravityResizeAspect：等比例填充，直到一个维度到达区域边界）
    self.playerVie.playerLayerGravity = ZFPlayerLayerGravityResizeAspect;
    // 打开断点下载功能（默认没有这个功能）
    self.playerVie.hasDownload = YES;
    self.playerVie.panel.backBtn.hidden = YES;
    // 如果想从xx秒开始播放视频
    //self.playerView.seekTime = 15;
    //__weak typeof(self) weakSelf = self;
//    self.playerVie.goBackBlock = ^{
//        [weakSelf dismissViewControllerAnimated:YES completion:^{
//            [weakSelf.playerVie cancelAutoFadeOutControlBar];
//            [weakSelf.playerVie pause];
//            [weakSelf.noticeview removeFromSuperview];
//        }];
//    };
    
    
    if (self.videoOrVoice) {
        return;
    }
    self.playerVie.panel.fullScreenBtn.hidden = YES;
    /** 音频插入 占位图片 */
    
    UIView *view = [UIView new];
    //    view.backgroundColor = [UIColor redColor];
    [self.playerVie insertSubview:view atIndex:1];
    [view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.playerVie);
    }];
    
    UIImageView *imageV = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@"VideoPlaceholder"]];
    self.BGimageV = imageV;
    [view addSubview:imageV];
//    imageV.frame = view.frame;
    [imageV mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(view);
    }];
    
    //    [imageV sd_setImageWithURL:[NSURL URLWithString:[AddHostToLoadPIC AddHostToLoadPICWithString:self.liveitem.thumb2]] placeholderImage:[UIImage imageNamed:@"VideoPlaceholder"]];
    
    
    [self setImageToView:self.liveitem.thumb2 SetImageV:imageV InView:view OrSize:view.gls_size];
    
    //self.playerVie.panel.backBtn.hidden = YES;
    
    
}

- (void)setImageToView:(NSString *)imagePath SetImageV:(UIImageView *)Imageview InView:(UIView *)inView OrSize:(CGSize)size
{
    NSString *path = [[ValuesFromXML getValueWithName:@"Images_Absolute_Address" WithKind:XMLTypeNetPort] stringByAppendingPathComponent:imagePath];
    dispatch_async(dispatch_queue_create("queue_content", nil), ^{
        UIImage *image = [LocalDataRW getImageWithDirectory:Directory_XB RetalivePath:path];
        
        __block typeof (image) wimage = image;
        dispatch_async(dispatch_get_main_queue(), ^{
            if (inView) {
                wimage = [ZJBHelp handleImage:wimage withSize:inView.frame.size withFromStudy:YES];
                [Imageview setImage:wimage];
            }else{
                wimage = [ZJBHelp handleImage:wimage withSize:size withFromStudy:YES];
                [Imageview setImage:wimage];
            }
        });
    });
    
}

- (void)createTableView{
    NSLog(@"self.view.frame.size.height %f",self.view.frame.size.height);
    UITableView *tableView = [[UITableView alloc]initWithFrame:CGRectMake(0, 64, self.view.frame.size.width, self.view.frame.size.height - 64 - 49) style:UITableViewStylePlain];
    tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    tableView.delegate = self;
    tableView.dataSource = self;
    tableView.backgroundColor = [UIColor hx_colorWithHexRGBAString:@"f2f2f2"];
    [self.view addSubview:tableView];
    
    self.tableView = tableView;
    
//    tableView.tableHeaderView = self.playerVie;
    
//    __unsafe_unretained UITableView *tableView1 = self.tableView;
//    
//    // 下拉刷新
//    tableView1.mj_header= [MJRefreshNormalHeader headerWithRefreshingBlock:^{
//        
//        [self createData];
//        
//    }];
//    
//    // 设置自动切换透明度(在导航栏下面自动隐藏)
//    tableView1.mj_header.automaticallyChangeAlpha = YES;
//    
//    // 上拉刷新
//    tableView1.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingBlock:^{
//        // 模拟延迟加载数据，因此2秒后才调用（真实开发中，可以移除这段gcd代码）
//        //        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//        //            // 结束刷新
//        //            [tableView1.mj_footer endRefreshing];
//        //        });
//        footerFresh = YES;
//        [self createFootData];
//    }];
//    [tableView1.mj_header beginRefreshing];
}

- (void)createData{
    NSLog(@"-----------头部刷新数据-----------");
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        //[self downloadData];
    });
    
}

- (void)createFootData{
    NSLog(@"-----------尾部加载更多数据-----------");
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        //        for (int i = 200; i < 210; i ++) {
        //            [self.dataSource addObject:[NSString stringWithFormat:@"%d",i]];
        //        }
       // [self downloadData];
        //        [_refresh endRefresh];
    });
}


-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}

//- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
////    UIView *view = [UIView new];
////    view.backgroundColor = [UIColor redColor];
//    return self.playerVie;//self.playerVie
//}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    return self.playerVie.frame.size.height;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.commentAry.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    static NSString *commentIdentifier = @"VideoAndVoiceCell";
    VideoAndVoiceCell *cell = [tableView dequeueReusableCellWithIdentifier:commentIdentifier];
    if (!cell) {
        cell = [[VideoAndVoiceCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:commentIdentifier];
    }
    cell.model = [self.commentAry objectAtIndex:indexPath.row];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    return cell;
}


-(CGFloat) tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    if (self.commentAry) {
        CourseTimeEvaluateModel *model = self.commentAry[indexPath.row];
        if (indexPath.row == self.commentAry.count - 1) {
            return model.height + 33 + 41;
        }
        return model.height + 33 + 21;
    }
    return 0;
}


- (void)cellWithDataModel:(NSArray *) array{
    NSDictionary *contentAttrs = @{NSFontAttributeName:[UIFont systemFontOfSize:14]};
    UILabel *courseTview = [[UILabel alloc]init];
    courseTview.font = [UIFont systemFontOfSize:14];
    courseTview.numberOfLines = 0;
    courseTview.lineBreakMode = NSLineBreakByWordWrapping;
    for (int i = 0; i < array.count; i ++) {
        CourseTimeEvaluateModel *model = [array objectAtIndex:i];
        int singleWidth = [[model.eval_content substringToIndex:1] sizeWithAttributes:contentAttrs].width;
        int count = (SCREEN_WIDTH - 98) / singleWidth;
        NSMutableAttributedString * attributedString1 = [[NSMutableAttributedString alloc] initWithString:model.eval_content];
        NSMutableParagraphStyle * paragraphStyle1 = [[NSMutableParagraphStyle alloc] init];
        [paragraphStyle1 setLineSpacing:8];
        [attributedString1 addAttribute:NSParagraphStyleAttributeName value:paragraphStyle1 range:NSMakeRange(0, [model.eval_content length])];
        [courseTview setAttributedText:attributedString1];
        if (model.eval_content.length > count) {
            model.width = SCREEN_WIDTH - 76;
            CGSize size = [courseTview sizeThatFits:CGSizeMake(model.width, MAXFLOAT)];
            model.height = size.height + 16;
        }else{
            model.width = [model.eval_content sizeWithAttributes:contentAttrs].width + 22;
            model.height = [model.eval_content sizeWithAttributes:contentAttrs].height + 16;
        }
        [self.commentAry addObject:model];
    }
}




- (NSDateFormatter *)dateFormatter {
    static NSDateFormatter* dateFormatter;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateFormat:@"MM月dd日 hh:mm"];
    });
    return dateFormatter;
}

#pragma mark -- 发送文本
- (void)chatKeyBoardSendText:(NSString *)text
{
    if (text.length > 255) {
        [Toast makeShowCommen:@"抱歉，您的评论字数已超" ShowHighlight:@"255" HowLong:1];
        return;
    }
    [self.chatKeyBoard keyboardDown];
    [[HttpManager shareManager] netStatus:^(AFNetworkReachabilityStatus status) {
        if(status == AFNetworkReachabilityStatusReachableViaWWAN || status ==AFNetworkReachabilityStatusReachableViaWiFi){
            
        }else{
            [Toast makeShowCommen:@"您的网络有问题 " ShowHighlight:@"请重置" HowLong:1.2];
            return ;
        }
    }];
    
    if (!(text.length > 0)) {
        return;
    }
    SendEvaluateForQuestionModel *model = [[SendEvaluateForQuestionModel alloc]init];
    model.access_token = [[LoginVM getInstance] readLocal].token;
    model.class_id = self.class_id;
    model.eval_id = @"";
    model.content = text;
    SendAndGetDataFromNet *send = [[SendAndGetDataFromNet alloc]init];
    __block SendAndGetDataFromNet *wsend = send;
    __weak typeof (self) wself = self;
    send.returnDict = ^(NSDictionary *dict){
        if (!dict) {
            [Toast makeShowCommen:@"抱歉，您的网络出现故障，" ShowHighlight:@"评论失败" HowLong:1.5];
        }else{
            if (1 == [[dict objectForKey:@"state"] intValue]) {
                wself.requestCount = 0;
                [wself DownLoadData];
                [SVProgressHUD showInfoWithStatus:dict[@"info"]];
            }else{
                if (wself.requestCount > 1) {
                    return ;
                }
                [LoginVM getInstance].isGetToken = ^(){
                    model.access_token = [[LoginVM getInstance] readLocal].token;
                    wself.requestCount ++;
                    [wsend dictFromNet:model WithRelativePath:@"Send_Evaluate_CourseTime_URL"];
                };
                [[LoginVM getInstance] loginWithUserInfoForGetNewToken:[[LoginVM getInstance] readLocal]];
            }
        }
    };
    [send dictFromNet:model WithRelativePath:@"Send_Evaluate_CourseTime_URL"];
}


- (void)DownLoadData
{
    NSDictionary *parameters = @{
                                 @"access_token":[LoginVM getInstance].readLocal.token,
                                 @"id":self.class_id,
                                 
                                 };
    
    [HttpToolSDK postWithURL:[[ValuesFromXML getValueWithName:abPath WithKind:XMLTypeNetPort] stringByAppendingPathComponent:@"Web/Study/getClass"] parameters:parameters success:^(id json) {
        
        if ([json[@"state"] isEqual:@(0)]) {
            [SVProgressHUD showInfoWithStatus:json[@"info"]];
            return ;
        }
        
        self.liveitem = [LiveVideoDetailItem mj_objectWithKeyValues:json[@"data"]];
        self.liveitem.question = [CourseTimeEvaluateModel mj_objectArrayWithKeyValuesArray:self.liveitem.evaluate];
        self.question = [[self.liveitem.question reverseObjectEnumerator] allObjects];
        [self.commentAry removeAllObjects];
        [self cellWithDataModel:self.question];
        [self.tableView reloadData];
        
        
    } failure:^(NSError *error) {
        
    }];
}


#pragma mark - 旋转
- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration
{
    
    /** 高林修改了 旋转屏幕后 9：16 view 没有返回按钮 */
    if (self.playerVie.isFullScreen == YES) {
        // 这里 YES / NO  是反的 是转换前
        self.playerVie.panel.backBtn.hidden = YES;
    }else {
        self.playerVie.panel.backBtn.hidden = NO;
    }
    
    if (toInterfaceOrientation == UIInterfaceOrientationPortrait) {
        self.view.backgroundColor = [UIColor whiteColor];
        //if use Masonry,Please open this annotation
        
        [[self navigationController]setNavigationBarHidden:NO animated:YES];
        
         [self.playerVie mas_updateConstraints:^(MASConstraintMaker *make) {
             make.top.equalTo(self.view).offset(64);
         }];
         
    }else if (toInterfaceOrientation == UIInterfaceOrientationLandscapeRight || toInterfaceOrientation == UIInterfaceOrientationLandscapeLeft) {
        self.view.backgroundColor = [UIColor blackColor];
        //if use Masonry,Please open this annotation
        
        [[self navigationController]setNavigationBarHidden:YES animated:YES];
        
         [self.playerVie mas_updateConstraints:^(MASConstraintMaker *make) {
             make.top.equalTo(self.view).offset(0);
         }];
    }
}

#pragma mark - 预告view
- (void)StartNotice
{
    [self.view layoutIfNeeded];
    
    if (self.noticeViewBlock) {
        return ;
    }else{
        self.noticeViewBlock = YES;
    }
    
    startNoticeView *noticeview = [startNoticeView startNoticeView];
    [self.view addSubview:noticeview];
    self.noticeview = noticeview;
    noticeview.glx_x = 0;
    noticeview.gly_y = GLScreenH * 0.5 - (155 / 2);
    noticeview.glw_width = GLScreenW;
    noticeview.glh_height = 155;
    
    noticeview.alpha = 0;
    
    noticeview.panelView.hidden = YES;
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.7 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        noticeview.alpha = 1;
    });
    
    
    
    /** 视频点播 也先【同上】这样吧 */
    if ([self.liveitem.type isEqualToString:@"1"]) {
        noticeview.isVoice = YES;
    }
    
    noticeview.liveitem = self.liveitem;
}

#pragma mark -- ChatKeyBoardDataSource
- (NSArray<MoreItem *> *)chatKeyBoardMorePanelItems
{
    MoreItem *item1 = [MoreItem moreItemWithPicName:@"sharemore_location" highLightPicName:nil itemName:@"位置"];
    MoreItem *item2 = [MoreItem moreItemWithPicName:@"sharemore_pic" highLightPicName:nil itemName:@"图片"];
    MoreItem *item3 = [MoreItem moreItemWithPicName:@"sharemore_video" highLightPicName:nil itemName:@"拍照"];
    MoreItem *item4 = [MoreItem moreItemWithPicName:@"sharemore_location" highLightPicName:nil itemName:@"位置"];
    MoreItem *item5 = [MoreItem moreItemWithPicName:@"sharemore_pic" highLightPicName:nil itemName:@"图片"];
    MoreItem *item6 = [MoreItem moreItemWithPicName:@"sharemore_video" highLightPicName:nil itemName:@"拍照"];
    MoreItem *item7 = [MoreItem moreItemWithPicName:@"sharemore_location" highLightPicName:nil itemName:@"位置"];
    MoreItem *item8 = [MoreItem moreItemWithPicName:@"sharemore_pic" highLightPicName:nil itemName:@"图片"];
    MoreItem *item9 = [MoreItem moreItemWithPicName:@"sharemore_video" highLightPicName:nil itemName:@"拍照"];
    return @[item1, item2, item3, item4, item5, item6, item7, item8, item9];
}
- (NSArray<ChatToolBarItem *> *)chatKeyBoardToolbarItems
{
    ChatToolBarItem *item1 = [ChatToolBarItem barItemWithKind:kBarItemFace normal:@"face" high:@"face_HL" select:@"keyboard"];
    
    ChatToolBarItem *item2 = [ChatToolBarItem barItemWithKind:kBarItemVoice normal:@"voice" high:@"voice_HL" select:@"keyboard"];
    
    ChatToolBarItem *item3 = [ChatToolBarItem barItemWithKind:kBarItemMore normal:@"more_ios" high:@"more_ios_HL" select:nil];
    
    ChatToolBarItem *item4 = [ChatToolBarItem barItemWithKind:kBarItemSwitchBar normal:@"switchDown" high:nil select:nil];
    
    return @[item1, item2, item3, item4];
}

- (NSArray<FaceThemeModel *> *)chatKeyBoardFacePanelSubjectItems
{
    return [FaceSourceManager loadFaceSource];
}



@end
